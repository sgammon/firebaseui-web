/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

// UI elements for the FirebaseUI widget.

{namespace firebaseui.auth.soy2.element}


/**
 * Renders an email input field.
 */
{template .email}
  {@param? email: string} /** The email address to prefill. */
  {@param? disabled: bool} /** Whether the email input is disabled or not. */
  {@param? changeEmail: bool} /** Whether to use change email label. */
  <div class="{css('firebaseui-textfield')} {css('mdl-textfield')} {css('mdl-js-textfield')} {css('mdl-textfield--floating-label')}">
    <label class="{css('mdl-textfield__label')} {css('firebaseui-label')}" for="ui-sign-in-email-input">
      {if $changeEmail}
        {msg desc="Label of a change email address input field."}Enter new email address{/msg}
      {else}
        {msg desc="Label of an email address input field."}Email{/msg}
      {/if}
    </label>
    <input
        type="email"
        name="email"
        id="ui-sign-in-email-input"
        autocomplete="username"
        class="{css('mdl-textfield__input')} {css('firebaseui-input')} {css('firebaseui-id-email')}"
        value="{$email ?: ''}"
        {if $disabled}disabled{/if}>
  </div>
  <div class="{css('firebaseui-error-wrapper')}">
    <p class="{css('firebaseui-error')} {css('firebaseui-text-input-error')} {css('firebaseui-hidden')}{sp}
              {css('firebaseui-id-email-error')}"></p>
  </div>
{/template}


/**
 * Renders a phone number input field.
 */
{template .phoneNumber}
  {@param? nationalNumber: string} /** The phone number to prefill. */

  <div class="{css('firebaseui-phone-number')}">
    <button class="{css('firebaseui-id-country-selector')} {css('firebaseui-country-selector')}{sp}
                   {css('mdl-button')} {css('mdl-js-button')}">
      <span class="{css('firebaseui-flag')} {css('firebaseui-country-selector-flag')}{sp}
                   {css('firebaseui-id-country-selector-flag')}"></span>
      <span class="{css('firebaseui-id-country-selector-code')}">
      </span>
    </button>
    <div class="{css('mdl-textfield')} {css('mdl-js-textfield')} {css('mdl-textfield--floating-label')}{sp}
                {css('firebaseui-textfield')} {css('firebaseui-phone-input-wrapper')}">
      <label class="{css('mdl-textfield__label')} {css('firebaseui-label')}" for="ui-sign-in-phone-number-input">
        {msg desc="Label of an phone number input field."}Phone number{/msg}
      </label>
      <input 
          type="tel" 
          name="phoneNumber"
          id="ui-sign-in-phone-number-input"
          class="{css('mdl-textfield__input')} {css('firebaseui-input')} {css('firebaseui-id-phone-number')}"
          value="{$nationalNumber ?: ''}">
    </div>
  </div>
  <div class="{css('firebaseui-error-wrapper')}">
    <p class="{css('firebaseui-error')} {css('firebaseui-text-input-error')} {css('firebaseui-hidden')}{sp}
              {css('firebaseui-phone-number-error')} {css('firebaseui-id-phone-number-error')}"></p>
  </div>
{/template}


/**
 * Renders a phone confirmation code input field.
 */
{template .phoneConfirmationCode}
  <div class="{css('firebaseui-textfield')} {css('mdl-textfield')} {css('mdl-js-textfield')}{sp}
              {css('mdl-textfield--floating-label')}">
    <label class="{css('mdl-textfield__label')} {css('firebaseui-label')}" for="ui-sign-in-phone-confirmation-code-input">
      {msg desc="Label of 6-digit SMS verification code."}6-digit code{/msg}
    </label>
    <input 
        type="number"
        name="phoneConfirmationCode"
        id="ui-sign-in-phone-confirmation-code-input"
        class="{css('mdl-textfield__input')} {css('firebaseui-input')} {css('firebaseui-id-phone-confirmation-code')}">
  </div>
  <div class="{css('firebaseui-error-wrapper')}">
    <p class="{css('firebaseui-error')} {css('firebaseui-text-input-error')} {css('firebaseui-hidden')}{sp}
              {css('firebaseui-id-phone-confirmation-code-error')}"></p>
  </div>
{/template}


/**
 * Renders resend elements.
 */
{template .resend}
  <div class="{css('firebaseui-resend-container')}">
    <span class="{css('firebaseui-id-resend-countdown')}">
    </span>
    <a href="javascript:void(0)" class="{css('firebaseui-id-resend-link')} {css('firebaseui-hidden')}{sp}
                                        {css('firebaseui-link')}">
      {msg desc="A link to trigger re-sending the phone confirmation code."}Resend{/msg}
    </a>
  </div>
{/template}


/**
 * Renders an identity provider button.
 */
{template .idpButton}
  {@param? providerConfig: [providerId:string, providerName:string|null, fullLabel:string|null,
      buttonColor:string|null, iconUrl: string|null]} /** The IdP provider config. */
  <button
      class="{css('firebaseui-idp-button')} {css('mdl-button')} {css('mdl-js-button')} {css('mdl-button--raised')}{sp}
             {call .idpClass data="all" /} {css('firebaseui-id-idp-button')}"
      data-provider-id="{$providerConfig.providerId}"
      style="background-color:{call .idpColor data="all" /}">
    <span class="{css('firebaseui-idp-icon-wrapper')}">
      <img
          class="{css('firebaseui-idp-icon')}"
          alt=""
          src="{call .idpLogo data="all" /}">
    </span>
    {if $providerConfig.providerId == 'password'}
      <span class="{css('firebaseui-idp-text')} {css('firebaseui-idp-text-long')}">
        {if $providerConfig.fullLabel}
          {$providerConfig.fullLabel}
        {elseif $providerConfig.providerName}
          {msg desc="Labels for sign-in buttons, long version"}
            Sign in with{sp}
            {call .idpName data="all" /}
          {/msg}
        {else}
          {msg desc="Label for a button to sign in with an email account that requires a password.
              The long version"}
            Sign in with email
          {/msg}
        {/if}
      </span>
      <span class="{css('firebaseui-idp-text')} {css('firebaseui-idp-text-short')}">
        {if $providerConfig.providerName}
          {$providerConfig.providerName}
        {else}
          {msg desc="Label for a button to sign in with an email account that requires a password.
              The short version"}
            Email
          {/msg}
        {/if}
      </span>
    {elseif $providerConfig.providerId == 'phone'}
      <span class="{css('firebaseui-idp-text')} {css('firebaseui-idp-text-long')}">
        {if $providerConfig.fullLabel}
          {$providerConfig.fullLabel}
        {elseif $providerConfig.providerName}
          {msg desc="Labels for sign-in buttons, long version"}
            Sign in with{sp}
            {call .idpName data="all" /}
          {/msg}
        {else}
          {msg desc="Label for a button to sign in with phone number.
              The long version"}
            Sign in with phone
          {/msg}
        {/if}
      </span>
      <span class="{css('firebaseui-idp-text')} {css('firebaseui-idp-text-short')}">
        {if $providerConfig.providerName}
          {$providerConfig.providerName}
        {else}
          {msg desc="Label for a button to sign in with phone number.
              The short version"}
            Phone
          {/msg}
        {/if}
      </span>
    {elseif $providerConfig.providerId == 'anonymous'}
      <span class="{css('firebaseui-idp-text')} {css('firebaseui-idp-text-long')}">
        {if $providerConfig.fullLabel}
          {$providerConfig.fullLabel}
        {elseif $providerConfig.providerName}
          {msg desc="Labels for sign-in buttons, long version"}
            Sign in with{sp}
            {call .idpName data="all" /}
          {/msg}
        {else}
          {msg desc="Label for a button to continue as a guest user.
              The long version"}
            Continue as guest
          {/msg}
        {/if}
      </span>
      <span class="{css('firebaseui-idp-text')} {css('firebaseui-idp-text-short')}">
        {if $providerConfig.providerName}
          {$providerConfig.providerName}
        {else}
          {msg desc="Label for a button to continue as a guest user.
              The short version"}
            Guest
          {/msg}
        {/if}
      </span>
    {else}
      <span class="{css('firebaseui-idp-text')} {css('firebaseui-idp-text-long')}">
        {if $providerConfig.fullLabel}
          {$providerConfig.fullLabel}
        {else}
          {msg desc="Labels for sign-in buttons, long version"}
            Sign in with{sp}
            {call .idpName data="all" /}
          {/msg}
        {/if}
      </span>
      <span class="{css('firebaseui-idp-text')} {css('firebaseui-idp-text-short')}">
        {if $providerConfig.providerName}
          {$providerConfig.providerName}
        {else}
          {call .idpName data="all" /}
        {/if}
      </span>
    {/if}
  </button>
{/template}


/**
 * Renders a submit button.
 */
{template .submitButton}
  {@param? label: string} /** Label of the button, defaulting to "Next" if not specified. */
  <button type="submit" class="{css('firebaseui-id-submit')} {css('firebaseui-button')}{sp}
      {css('mdl-button')} {css('mdl-js-button')} {css('mdl-button--raised')} {css('mdl-button--colored')}">
    {if $label}
      {$label}
    {else}
      {msg desc="Label of the button that takes the user to the next step in the sign-in flow."}
        Next
      {/msg}
    {/if}
  </button>
{/template}


/**
 * Renders a Trouble getting email button.
 */
{template .troubleGettingEmailButton}
  <a class="{css('firebaseui-link')} {css('firebaseui-id-trouble-getting-email-link')}"
      href="javascript:void(0)">
    {msg desc="The label of the button that will redirect to the screen with instructions for
        troubleshooting issues related to not receiving an email message."}
      Trouble getting email?
    {/msg}
  </a>
{/template}


/**
 * Renders a resend email link button.
 */
{template .resendEmailLinkButton}
  <a class="{css('firebaseui-link')} {css('firebaseui-id-resend-email-link')}"
      href="javascript:void(0)">
    {msg desc="Label of the resend email link button"}Resend{/msg}
  </a>
{/template}


/**
 * Renders a sign-in button.
 */
{template .signInButton}
  {call .submitButton}
    {param label kind="text"}
      {msg desc="The submit button in the sign-in form."}
        Sign In
      {/msg}
    {/param}
  {/call}
{/template}


/**
 * Renders a save button.
 */
{template .saveButton}
  {call .submitButton}
    {param label kind="text"}
      {msg desc="The submit button for a form that changes the state of the user
          (e.g. creating an account, resetting the password, etc.)."}
        Save
      {/msg}
    {/param}
  {/call}
{/template}


/**
 * Renders a continue button.
 */
{template .continueButton}
  {call .submitButton}
    {param label kind="text"}
      {msg desc="The continue button for a form that redirects the application to another page."}
        Continue
      {/msg}
    {/param}
  {/call}
{/template}


/**
 * Renders two text input fields for setting first and last name.
 */
{template .name}
  {@param? name: string} /** The display name to prefill. */
  <div class="{css('firebaseui-textfield')} {css('mdl-textfield')} {css('mdl-js-textfield')} {css('mdl-textfield--floating-label')}">
    <label class="{css('mdl-textfield__label')} {css('firebaseui-label')}" for="ui-sign-in-name-input">
      {msg desc="Label of a field for setting the user's name."}First &amp; last name{/msg}
    </label>
    <input
        type="text"
        name="name"
        id="ui-sign-in-name-input"
        autocomplete="name"
        class="{css('mdl-textfield__input')} {css('firebaseui-input')} {css('firebaseui-id-name')}"
        value="{$name ?: ''}">
  </div>
  <div class="{css('firebaseui-error-wrapper')}">
    <p class="{css('firebaseui-error')} {css('firebaseui-text-input-error')} {css('firebaseui-hidden')}{sp}
              {css('firebaseui-id-name-error')}"></p>
  </div>
{/template}


/**
 * Renders a new password input field, where the user can show the password by clicking the toggle
 * button.
 */
{template .newPassword}
  {@param? label: string} /** The placeholder text in the field, defaulting to "Choose password". */
  <div class="{css('firebaseui-new-password-component')}">
    <div class="{css('firebaseui-textfield')} {css('mdl-textfield')} {css('mdl-js-textfield')} {css('mdl-textfield--floating-label')}">
      <label class="{css('mdl-textfield__label')} {css('firebaseui-label')}" for="ui-sign-in-new-password-input">
        {if $label}
          {$label}
        {else}
          {msg desc="Label of a field for setting new password."}Choose password{/msg}
        {/if}
      </label>
      <input
          type="password"
          name="newPassword"
          id="ui-sign-in-new-password-input"
          autocomplete="new-password"
          class="{css('mdl-textfield__input')} {css('firebaseui-input')} {css('firebaseui-id-new-password')}">
    </div>
    <a href="javascript:void(0)" class="{css('firebaseui-input-floating-button')}{sp}
        {css('firebaseui-id-password-toggle')} {css('firebaseui-input-toggle-on')} {css('firebaseui-input-toggle-blur')}">
    </a>
    <div class="{css('firebaseui-error-wrapper')}">
      <p class="{css('firebaseui-error')} {css('firebaseui-text-input-error')} {css('firebaseui-hidden')}{sp}
          {css('firebaseui-id-new-password-error')}">
      </p>
    </div>
  </div>
{/template}


/**
 * Renders a password input field.
 */
{template .password}
  {@param? current: bool} /** Whether to show "Current password" or "Password" label. */
  <div class="{css('firebaseui-textfield')} {css('mdl-textfield')} {css('mdl-js-textfield')} {css('mdl-textfield--floating-label')}">
    <label class="{css('mdl-textfield__label')} {css('firebaseui-label')}" for="ui-sign-in-password-input">
      {if $current}
        {msg desc="Label of a password field."}Current password{/msg}
      {else}
        {msg desc="Label of a password field."}Password{/msg}
      {/if}
    </label>
    <input
        type="password"
        name="password"
        id="ui-sign-in-password-input"
        autocomplete="current-password"
        class="{css('mdl-textfield__input')} {css('firebaseui-input')} {css('firebaseui-id-password')}">
  </div>
  <div class="{css('firebaseui-error-wrapper')}">
    <p class="{css('firebaseui-error')} {css('firebaseui-text-input-error')} {css('firebaseui-hidden')}{sp}
              {css('firebaseui-id-password-error')}">
    </p>
  </div>
{/template}


/**
 * Renders the password recovery button.
 */
{template .passwordRecoveryButton}
  <a class="{css('firebaseui-link')} {css('firebaseui-id-secondary-link')} {css('href="javascript:void(0)')}">
    {msg desc="Label of the password recovery link"}Trouble signing in?{/msg}
  </a>
{/template}


/**
 * Renders the cancel button.
 */
{template .cancelButton}
  {@param? label: string} /** Label of the button, defaulting to "Cancel" if not specified. */
  <button class="{css('firebaseui-id-secondary-link')} {css('firebaseui-button')} {css('mdl-button')} {css('mdl-js-button')}{sp}
                 {css('mdl-button--primary')}">
    {if $label}
      {$label}
    {else}
      {msg desc="Link to cancel the current flow."}Cancel{/msg}
    {/if}
  </button>
{/template}


/**
 * Renders a notice to the user about SMS rates.
 */
{template .phoneAuthSmsNotice}
  <p class="{css('firebaseui-tos')} {css('firebaseui-phone-sms-notice')}">
    {msg desc="Notify the user that an SMS may be sent, which may cost the user money.
        Note that 'Verify' must match the the label of the 'Verify' button that initiates the
        phone number verification."}
      By tapping Verify, an SMS may be sent. Message &amp; data rates may apply.
    {/msg}
  </p>
{/template}


/**
 * Renders the links of Terms of Service and Privacy Policy.
 */
{template .tosPpLink}
  {@inject? tosCallback: string}
  {@inject? privacyPolicyCallback: string}

  {if isNonnull($tosCallback) and isNonnull($privacyPolicyCallback)}
    <ul class="{css('firebaseui-tos-list')} {css('firebaseui-tos')}">
      <li class="{css('firebaseui-inline-list-item')}">
        <a href="javascript:void(0)" class="{css('firebaseui-link')} {css('firebaseui-tos-link')}" target="_blank">
          {msg desc="Label for the terms of service"}Terms of Service{/msg}
        </a>
      </li>
      <li class="{css('firebaseui-inline-list-item')}">
        <a href="javascript:void(0)" class="{css('firebaseui-link')} {css('firebaseui-pp-link')}" target="_blank">
          {msg desc="Label for the privacy policy"}Privacy Policy{/msg}
        </a>
      </li>
    </ul>
  {/if}
{/template}


/**
 * Renders Terms of Service and Privacy Policy agreement and a notice to the user about SMS rates
 * for phone authentication.
 */
{template .phoneTosPp}
  {@inject? tosCallback: string}
  {@inject? privacyPolicyCallback: string}

  <p class="{css('firebaseui-tos')} {css('firebaseui-phone-tos')}">
    {if isNonnull($tosCallback) and isNonnull($privacyPolicyCallback)}
      {msg desc="The terms of service and privacy policy for a phone authentication flow. Note that
          'Verify' must match the the label of the 'Verify' button that completes the
          phone number verification flow."}
        By tapping Verify, you are indicating that you accept our{sp}
        <a href="javascript:void(0)" class="{css('firebaseui-link')} {css('firebaseui-tos-link')}" target="_blank">
          Terms of Service
        </a> and{sp}
        <a href="javascript:void(0)" class="{css('firebaseui-link')} {css('firebaseui-pp-link')}" target="_blank">
          Privacy Policy
        </a>
        . An SMS may be sent. Message &amp; data rates may apply.
      {/msg}
    {else}
      {msg desc="Notify the user that an SMS may be sent, which may cost the user money.
        Note that 'Verify' must match the the label of the 'Verify' button that initiates the
        phone number verification."}
        By tapping Verify, an SMS may be sent. Message &amp; data rates may apply.
      {/msg}
    {/if}
  </p>
{/template}


/**
 * Renders full Terms of Service and Privacy Policy agreement for the first page.
 */
{template .fullMessageTosPp}
  {@inject? tosCallback: string}
  {@inject? privacyPolicyCallback: string}

  {if isNonnull($tosCallback) and isNonnull($privacyPolicyCallback)}
    <p class="{css('firebaseui-tos')} {css('firebaseui-tospp-full-message')}">
      {msg desc="The terms of service and privacy policy for the first page."}
        By continuing, you are indicating that you accept our{sp}
        <a href="javascript:void(0)" class="{css('firebaseui-link')} {css('firebaseui-tos-link')}" target="_blank">
          Terms of Service
        </a> and{sp}
        <a href="javascript:void(0)" class="{css('firebaseui-link')} {css('firebaseui-pp-link')}" target="_blank">
          Privacy Policy
        </a>.
      {/msg}
    </p>
  {/if}
{/template}


/**
 * Renders an info bar with the given message.
 */
{template .infoBar}
  {@param message: string} /** The message to show. */
  <div class="{css('firebaseui-info-bar')} {css('firebaseui-id-info-bar')}">
    <p class="{css('firebaseui-info-bar-message')}">
      {$message}&nbsp;&nbsp;
      <a href="javascript:void(0)"
         class="{css('firebaseui-link')} {css('firebaseui-id-dismiss-info-bar')}">
        {msg desc="label of a button which dismisses the notification message"}
          Dismiss
        {/msg}
      </a>
    </p>
  </div>
{/template}


/**
 * Renders a modal dialog.
 */
{template .dialog}
  {@param content: html}
  {@param? classes: string} /** Additional classes to apply to the dialog. */

  <dialog class="{css('mdl-dialog')} {css('firebaseui-dialog')} {css('firebaseui-id-dialog')}
                 {if $classes}{sp}{$classes}{/if}">
    {$content}
  </dialog>
{/template}


/**
 * Renders a progress dialog with the given icon and message.
 */
{template .progressDialog}
  {@param iconClass: string}
  {@param message: string}

  {call .dialog}
    {param content kind="html"}
      <div class="{css('firebaseui-dialog-icon-wrapper')}">
        <div class="{$iconClass} {css('firebaseui-dialog-icon')}"></div>
      </div>
      <div class="{css('firebaseui-progress-dialog-message')}">
        {$message}
      </div>
    {/param}
  {/call}
{/template}


/**
 * Renders a ListBox dialog.
 */
{template .listBoxDialog}
  {@param items: list<[id:string, iconClass:string, label:string]>}

  {call .dialog}
    {param classes kind="text"}firebaseui-list-box-dialog{/param}
    {param content kind="html"}
      <div class="{css('firebaseui-list-box-actions')}">
        {for $item in $items}
          <button type="button" data-listboxid="{$item.id}"
                  class="{css('mdl-button')} {css('firebaseui-id-list-box-dialog-button')}{sp}
                         {css('firebaseui-list-box-dialog-button')}">
            {if $item.iconClass}
              <div class="{css('firebaseui-list-box-icon-wrapper')}">
                <div class="{css('firebaseui-list-box-icon')} {css('{$item.iconClass}')}"></div>
              </div>
            {/if}
            <div class="{css('firebaseui-list-box-label-wrapper')}">
              {$item.label}
            </div>
          </button>
        {/for}
      </div>
    {/param}
  {/call}
{/template}


/**
 * Renders a busy indicator to display while server operations are ongoing.
 */
{template .busyIndicator}
  {@param? useSpinner: bool}
  {if $useSpinner}
    <div class="{css('mdl-spinner')} {css('mdl-spinner--single-color')} {css('mdl-js-spinner')} {css('is-active')}{sp}
        {css('firebaseui-busy-indicator')} {css('firebaseui-id-busy-indicator')}"></div>
  {else}
    <div class="{css('mdl-progress')} {css('mdl-js-progress')} {css('mdl-progress__indeterminate')}{sp}
        {css('firebaseui-busy-indicator')} {css('firebaseui-id-busy-indicator')}"></div>
  {/if}
{/template}


/**
 * Renders a visible reCAPTCHA container.
 */
{template .recaptcha}
  <div class="{css('firebaseui-recaptcha-wrapper')}">
    <div class="{css('firebaseui-recaptcha-container')}"></div>
    <div class="{css('firebaseui-error-wrapper')} {css('firebaseui-recaptcha-error-wrapper')}">
      <p class="{css('firebaseui-error')} {css('firebaseui-hidden')} {css('firebaseui-id-recaptcha-error')}"></p>
    </div>
  </div>
{/template}


/**
 * Determines the IdP display name.
 * The list should match the supported provider IDs in Firebase Auth.
 */
{template .idpName kind="text"}
  {@inject? defaultProviderNames: map<string, string>}
  {@param? providerConfig: [providerId:string|null, providerName:string|null, fullLabel:string|null,
      buttonColor:string|null, iconUrl: string|null]} /** The IdP provider config. */

  {if $providerConfig.providerName}
    {$providerConfig.providerName}
  {elseif isNonnull($defaultProviderNames) and $defaultProviderNames[$providerConfig.providerId ?: "_DEFAULT_"]}
    {$defaultProviderNames[$providerConfig.providerId ?: "_DEFAULT_"]}
  {elseif isNonnull($defaultProviderNames) and $providerConfig.providerId and strIndexOf($providerConfig.providerId, 'saml.') == 0}
    {strSub($providerConfig.providerId, 5)}
  {elseif isNonnull($defaultProviderNames) and $providerConfig.providerId and strIndexOf($providerConfig.providerId, 'oidc.') == 0}
    {strSub($providerConfig.providerId, 5)}
  {else}
    {$providerConfig.providerId}
  {/if}
{/template}


/**
 * Determines the IdP CSS class.
 * The list should match the supported provider IDs in Firebase Auth.
 */
{template .idpClass kind="text" visibility="private"}
  {@param? providerConfig: [providerId:string, providerName:string|null, fullLabel:string|null,
      buttonColor:string|null, iconUrl: string|null]} /** The IdP provider config. */
  {switch $providerConfig.providerId}
    {case 'google.com'}
      {css('firebaseui-idp-google')}
    {case 'github.com'}
      {css('firebaseui-idp-github')}
    {case 'facebook.com'}
      {css('firebaseui-idp-facebook')}
    {case 'twitter.com'}
      {css('firebaseui-idp-twitter')}
    {case 'phone'}
      {css('firebaseui-idp-phone')}
    {case 'anonymous'}
      {css('firebaseui-idp-anonymous')}
    {case 'password'}
      {css('firebaseui-idp-password')}
    {default}
      {css('firebaseui-idp-generic')}
  {/switch}
{/template}


/**
 * Determines the IdP logo URL. The URL in the providerConfig has the highest priority. If not
 * provided, the default one per IdP will be used. If the provider ID is unknown, use the password
 * icon.
 */
{template .idpLogo kind="uri" visibility="private"}
  {@inject? defaultIconUrls: map<string, string>}
  {@param? providerConfig: [providerId:string, providerName:string|null, fullLabel:string|null,
      buttonColor:string|null, iconUrl: string|null]} /** The IdP provider config. */

  {if $providerConfig.iconUrl}
    {$providerConfig.iconUrl}
  {elseif isNonnull($defaultIconUrls) and $defaultIconUrls?[$providerConfig.providerId]}
    {$defaultIconUrls?[$providerConfig.providerId]}
  {elseif isNonnull($defaultIconUrls) and strIndexOf($providerConfig.providerId, 'saml.') == 0}
    {$defaultIconUrls?['saml']}
  {elseif isNonnull($defaultIconUrls) and strIndexOf($providerConfig.providerId, 'oidc.') == 0}
    {$defaultIconUrls?['oidc']}
  {elseif isNonnull($defaultIconUrls)}
    {$defaultIconUrls?['password']}
  {/if}
{/template}


/**
 * Determines the IdP button color. The button color in the providerConfig has the highest priority.
 * If not provided, the default one per IdP will be used. If the provider ID is unknown, use the
 * password icon.
 */
{template .idpColor kind="text" visibility="private"}
  {@inject? defaultButtonColors: map<string, string>}
  {@param? providerConfig: [providerId:string, providerName:string|null, fullLabel:string|null,
      buttonColor:string|null, iconUrl: string|null]} /** The IdP provider config. */

  {if $providerConfig.buttonColor}
    {$providerConfig.buttonColor}
  {elseif isNonnull($defaultButtonColors) and $defaultButtonColors?[$providerConfig.providerId]}
    {$defaultButtonColors[$providerConfig.providerId]}
  {elseif isNonnull($defaultButtonColors) and strIndexOf($providerConfig.providerId, 'saml.') == 0}
    {$defaultButtonColors?['saml']}
  {elseif isNonnull($defaultButtonColors) and strIndexOf($providerConfig.providerId, 'oidc.') == 0}
    {$defaultButtonColors?['oidc']}
  {elseif isNonnull($defaultButtonColors)}
    {$defaultButtonColors?['password']}
  {/if}
{/template}


/**
 * Renders a tenant selection button.
 */
{template .tenantSelectionButton}
  {@param tenantConfig: [tenantId:string|null, fullLabel:string|null, displayName:string,
      buttonColor:string, iconUrl: string]} /** The tenant selection button config. */
  {let $tenantClass kind="text"}
    {if $tenantConfig.tenantId}
      {$tenantConfig.tenantId}
    {else}
      top-level-project
    {/if}
  {/let}
  <button
      class="{css('firebaseui-tenant-button')} {css('mdl-button')} {css('mdl-js-button')} {css('mdl-button--raised')}{sp}
             firebaseui-tenant-selection-{$tenantClass} {css('firebaseui-id-tenant-selection-button')}"
      {if $tenantConfig.tenantId}data-tenant-id="{$tenantConfig.tenantId}"{/if}
      style="background-color:{$tenantConfig.buttonColor}">
    <span class="{css('firebaseui-idp-icon-wrapper')}">
      <img
          class="{css('firebaseui-idp-icon')}"
          alt=""
          src="{$tenantConfig.iconUrl}">
    </span>
    <span class="{css('firebaseui-idp-text')} {css('firebaseui-idp-text-long')}">
      {if $tenantConfig.fullLabel}
        {$tenantConfig.fullLabel}
      {else}
        {msg desc="Label for a button to sign in to a tenant. The long version"}
          Sign in to {$tenantConfig.displayName}
        {/msg}
      {/if}
    </span>
    <span class="{css('firebaseui-idp-text')} {css('firebaseui-idp-text-short')}">
      {msg desc="Label for a button to sign in to a tenant. The short version"}
        {$tenantConfig.displayName}
      {/msg}
    </span>
  </button>
{/template}

